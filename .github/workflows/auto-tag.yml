name: Auto Tag

on:
  push:
    branches: [master, main]

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for proper tag detection

      - name: Check for version keywords in commit message
        id: check-commit
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MSG"

          # Check for semantic version keywords
          if echo "$COMMIT_MSG" | grep -qiE '\[major\]|\bmajor:|\bbreaking:|\bfeat!:'; then
            echo "bump-type=major" >> $GITHUB_OUTPUT
            echo "Found major version bump indicator"
          elif echo "$COMMIT_MSG" | grep -qiE '\[minor\]|\bminor:|\bfeat:|\bfeature:'; then
            echo "bump-type=minor" >> $GITHUB_OUTPUT
            echo "Found minor version bump indicator"
          elif echo "$COMMIT_MSG" | grep -qiE '\[patch\]|\bpatch:|\bfix:|\bbugfix:'; then
            echo "bump-type=patch" >> $GITHUB_OUTPUT
            echo "Found patch version bump indicator"
          elif echo "$COMMIT_MSG" | grep -qiE '\[release\]|\brelease:'; then
            echo "bump-type=release" >> $GITHUB_OUTPUT
            echo "Found explicit release indicator"
          else
            echo "bump-type=none" >> $GITHUB_OUTPUT
            echo "No version bump indicators found"
          fi

      - name: Get latest tag
        id: get-latest-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Calculate new version
        id: calc-version
        if: steps.check-commit.outputs.bump-type != 'none'
        run: |
          LATEST_TAG="${{ steps.get-latest-tag.outputs.latest-tag }}"
          VERSION=${LATEST_TAG#v}  # Remove 'v' prefix

          # Parse version components
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Remove any pre-release suffix from patch version
          PATCH=$(echo $PATCH | sed 's/-.*$//')

          BUMP_TYPE="${{ steps.check-commit.outputs.bump-type }}"

          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch|release)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"

          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new-tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          echo "New tag: $NEW_TAG"

      - name: Create new tag
        if: steps.check-commit.outputs.bump-type != 'none'
        run: |
          NEW_TAG="${{ steps.calc-version.outputs.new-tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create annotated tag
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG

          Auto-generated tag based on commit: ${{ github.event.head_commit.message }}

          Bump type: ${{ steps.check-commit.outputs.bump-type }}
          Previous tag: ${{ steps.get-latest-tag.outputs.latest-tag }}
          "

          # Push the tag
          git push origin "$NEW_TAG"

          echo "Created and pushed tag: $NEW_TAG"

      - name: Create pre-release tag for develop branch
        if: github.ref == 'refs/heads/develop' && steps.check-commit.outputs.bump-type != 'none'
        run: |
          NEW_VERSION="${{ steps.calc-version.outputs.new-version }}"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          PRE_RELEASE_TAG="v$NEW_VERSION-dev.$TIMESTAMP"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -a "$PRE_RELEASE_TAG" -m "Pre-release $PRE_RELEASE_TAG

          Development build from commit: ${{ github.event.head_commit.message }}
          "

          git push origin "$PRE_RELEASE_TAG"

          echo "Created and pushed pre-release tag: $PRE_RELEASE_TAG"
